{:mvn/repos
 {"opensaml" {:url "https://build.shibboleth.net/nexus/content/repositories/releases/"}}

 :deps
 {org.clojure/spec.alpha               {:mvn/version "0.5.238"}
  org.clojure/tools.logging            {:mvn/version "1.3.0"}
  com.onelogin/java-saml               {:mvn/version "2.9.0"}
  clojure.java-time/clojure.java-time  {:mvn/version "1.4.2"}
  commons-io/commons-io                {:mvn/version "2.16.1"}
  org.apache.santuario/xmlsec          {:mvn/version "4.0.2"} ; use latest version and override transient dep from OpenSAML
  org.cryptacular/cryptacular          {:mvn/version "1.2.7"} ; use latest version and override transient dep from OpenSAML
  org.opensaml/opensaml-core-api       {:mvn/version "5.1.3"}
  org.opensaml/opensaml-core-impl      {:mvn/version "5.1.3"}
  org.opensaml/opensaml-messaging-impl {:mvn/version "5.1.3"}
  org.opensaml/opensaml-saml-impl      {:mvn/version "5.1.3"}
  org.opensaml/opensaml-xmlsec-api     {:mvn/version "5.1.3"}
  org.opensaml/opensaml-xmlsec-impl    {:mvn/version "5.1.3"}
  potemkin/potemkin                    {:mvn/version "0.4.7"}
  pretty/pretty                        {:mvn/version "1.0.5"}
  ring/ring-codec                      {:mvn/version "1.2.0"}
  jakarta.servlet/jakarta.servlet-api  {:mvn/version "6.1.0"}}

 :aliases
 {
  :dev
  {:extra-deps  {io.github.cognitect-labs/test-runner       {:git/tag "v0.5.1", :git/sha "dfb30dd6"}
                 pjstadig/humane-test-output                {:mvn/version "0.11.0"}
                 org.clojure/tools.logging                  {:mvn/version "1.3.0"}
                 org.apache.logging.log4j/log4j-core        {:mvn/version "2.24.3"}
                 org.apache.logging.log4j/log4j-slf4j2-impl {:mvn/version "2.24.3"}
                 ring/ring                                  {:mvn/version "1.13.0"}
                 etaoin/etaoin                              {:mvn/version "1.1.42"}
                 ring/ring-jetty-adapter                    {:mvn/version "1.13.0"}}
   :extra-paths ["test" "e2e"]}

  ;; clojure -X:dev:test
  :test
  {:exec-fn saml20-clj.runners.test/test}

  ;; clojure -X:dev:e2e
  :e2e
  {:exec-fn saml20-clj.runners.test/test
   :jvm-opts ["-Dclojure.tools.logging.factory=clojure.tools.logging.impl/log4j2-factory"]
   :exec-args {:dirs ["e2e"]}}


  ;; clojure -M:check
  :check
  {:extra-deps {athos/clj-check {:git/url "https://github.com/athos/clj-check.git"
                                 :sha     "d997df866b2a04b7ce7b17533093ee0a2e2cb729"}}
   :main-opts  ["-m" "clj-check.check"]}

  ;; clojure -X:dev:eastwood
  :eastwood
  {:extra-deps {jonase/eastwood {:mvn/version "1.4.3"}}
   :exec-fn    eastwood.lint/eastwood-from-cmdline
   :exec-args  {:source-paths    ["src"]
                :add-linters     [:unused-fn-args
                                  :unused-locals]
                :exclude-linters [:deprecations
                                  :unused-ret-vals
                                  :implicit-dependencies]}}

  ;; clojure -X:dev:cloverage
  :cloverage
  {:extra-deps {cloverage/cloverage {:mvn/version "1.2.4"}}
   :exec-fn    cloverage.coverage/run-project
   :exec-args  {:fail-threshold 66
                :codecov?       true
                ;; don't instrument logging forms, since they won't get executed as part of tests anyway
                ;; log calls expand to these
                :exclude-call   [clojure.tools.logging/logf clojure.tools.logging/logp]
                :src-ns-path    ["src"]
                :test-ns-path   ["test"]}}

  ;; clojure -M:kondo
  :kondo
  {:replace-deps {clj-kondo/clj-kondo {:mvn/version "2024.08.01"}}
   :main-opts    ["-m" "clj-kondo.main"
                  "--lint" "src"]}

  ;; clojure -T:whitespace-linter lint
  :whitespace-linter
  {:deps       {com.github.camsaul/whitespace-linter {:sha "e35bc252ccf5cc74f7d543ef95ad8a3e5131f25b"}}
   :ns-default whitespace-linter
   :exec-args  {:paths            ["./.dir-locals.el"
                                   "./deps.edn"
                                   "src"
                                   "test"]
                :include-patterns ["\\.clj.?$"
                                   "\\.edn$"
                                   "\\.el$"
                                   "\\.xml$"]}}

  :include-license
  {:extra-paths ["license"]}

  ;; clojure -T:build build
  ;; clojure -T:build deploy
  :build
  {:deps       {io.github.clojure/tools.build {:mvn/version "0.10.5"}
                slipset/deps-deploy           {:mvn/version "0.2.2"}}
   :ns-default build}}}
