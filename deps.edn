{:mvn/repos
 {"opensaml" {:url "https://build.shibboleth.net/nexus/content/repositories/releases/"}}

 :deps
 {org.clojure/spec.alpha              {:mvn/version "0.3.218"}
  org.clojure/tools.logging           {:mvn/version "1.2.4"}
  com.onelogin/java-saml              {:mvn/version "2.9.0"}
  clojure.java-time/clojure.java-time {:mvn/version "1.1.0"}
  commons-io/commons-io               {:mvn/version "2.11.0"}
  hiccup/hiccup                       {:mvn/version "1.0.5"}
  org.apache.santuario/xmlsec         {:mvn/version "3.0.3"} ; use latest version and override transient dep from OpenSAML
  org.cryptacular/cryptacular         {:mvn/version "1.2.5"} ; use latest version and override transient dep from OpenSAML
  org.opensaml/opensaml-core          {:mvn/version "4.2.0"}
  org.opensaml/opensaml-saml-api      {:mvn/version "4.2.0"}
  org.opensaml/opensaml-saml-impl     {:mvn/version "4.2.0"}
  org.opensaml/opensaml-xmlsec-api    {:mvn/version "4.2.0"}
  org.opensaml/opensaml-xmlsec-impl   {:mvn/version "4.2.0"}
  potemkin/potemkin                   {:mvn/version "0.4.6"}
  pretty/pretty                       {:mvn/version "1.0.5"}
  ring/ring-codec                     {:mvn/version "1.2.0"}}

 :aliases
 {
  :dev
  {:extra-deps  {io.github.cognitect-labs/test-runner {:git/tag "v0.5.1", :git/sha "dfb30dd6"}
                 pjstadig/humane-test-output          {:mvn/version "0.11.0"}}
   :extra-paths ["test"]}

  ;; clojure -X:dev:test
  :test
  {:exec-fn saml20-clj.runners.test/test}

  ;; clojure -M:check
  :check
  {:extra-deps {athos/clj-check {:git/url "https://github.com/athos/clj-check.git"
                                 :sha     "518d5a1cbfcd7c952f548e6dbfcb9a4a5faf9062"}}
   :main-opts  ["-m" "clj-check.check"]}

  ;; clojure -X:dev:eastwood
  :eastwood
  {:extra-deps {jonase/eastwood {:mvn/version "1.3.0"}}
   :exec-fn    eastwood.lint/eastwood-from-cmdline
   :exec-args  {:source-paths    ["src"]
                :add-linters     [:unused-fn-args
                                  :unused-locals]
                :exclude-linters [:deprecations
                                  :unused-ret-vals
                                  :implicit-dependencies]}}

  ;; clojure -X:dev:namespace-checker
  :namespace-checker
  {:extra-deps {lein-check-namespace-decls/lein-check-namespace-decls {:mvn/version "1.0.4"}} ; misnomer since this works on Clojure CLI now too
   :exec-fn    check-namespace-decls.core/check-namespace-decls
   :exec-args  {:prefix-rewriting false
                :source-paths     ["src" "test"]}}

  ;; clojure -X:dev:cloverage
  :cloverage
  {:extra-deps {cloverage/cloverage {:mvn/version "1.2.4"}}
   :exec-fn    cloverage.coverage/run-project
   :exec-args  {:fail-threshold 66
                :codecov?       true
                ;; don't instrument logging forms, since they won't get executed as part of tests anyway
                ;; log calls expand to these
                :exclude-call   [clojure.tools.logging/logf clojure.tools.logging/logp]
                :src-ns-path    ["src"]
                :test-ns-path   ["test"]}}

  ;; clojure -M:kondo
  :kondo
  {:replace-deps {clj-kondo/clj-kondo {:mvn/version "2022.12.10"}}
   :main-opts    ["-m" "clj-kondo.main"
                  "--lint" "src"]}

  ;; clojure -T:whitespace-linter lint
  :whitespace-linter
  {:deps       {com.github.camsaul/whitespace-linter {:sha "e35bc252ccf5cc74f7d543ef95ad8a3e5131f25b"}}
   :ns-default whitespace-linter
   :exec-args  {:paths            ["./.dir-locals.el"
                                   "./deps.edn"
                                   "src"
                                   "test"]
                :include-patterns ["\\.clj.?$"
                                   "\\.edn$"
                                   "\\.el$"
                                   "\\.xml$"]}}

  :include-license
  {:extra-paths ["license"]}

  ;; clojure -X:jar :version "\"$(cat VERSION.txt)\""
  :jar
  {:replace-deps {com.github.seancorfield/depstar {:mvn/version "2.1.303"}}
   :exec-fn      hf.depstar/jar
   :exec-args    {:group-id    "metabase"
                  :artifact-id "saml20-clj"
                  :jar         "target/saml20-clj.jar"
                  :sync-pom    true
                  :paths-only  true
                  :aliases     [:include-license]}}

  ;; clojure -X:deploy :artifact '"target/saml20-clj.jar"'
  :deploy
  {:extra-deps {slipset/deps-deploy {:mvn/version "RELEASE"}}
   :exec-fn    deps-deploy.deps-deploy/deploy
   :exec-args  {:installer :remote}}}}
